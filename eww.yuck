
(defvar separator "|")



;;                  __  __ _     _     _ _         _____           _                   
;;  _____________  |  \/  (_)   | |   | | |       |  __ \         | |    _____________ 
;; |_____________| | \  / |_  __| | __| | | ___   | |__) |_ _ _ __| |_  |_____________|
;;  _____________  | |\/| | |/ _` |/ _` | |/ _ \  |  ___/ _` | '__| __|  _____________ 
;; |_____________| | |  | | | (_| | (_| | |  __/  | |  | (_| | |  | |_  |_____________|
;;                 |_|  |_|_|\__,_|\__,_|_|\___|  |_|   \__,_|_|   \__|

;; == == == Time == == ==
(defpoll time :interval "1s"
  `date +'{"weekday":"%A","day":"%d","monthname":"%B","month":"%m","year":"%y","yearlong":"%Y","hour":"%H","min":"%M", "sec":"%S"}'`)

(defvar cal_rev false)

(defwidget time_short []
    (label  :class "time_short"
            :text {time.hour + ":" + time.min}))

(defwidget time_long []
    (label  :class "time_long"
            :text {time.hour + ":" + time.min + ":" + time.sec}))


;; == == == Date == == ==
(defwidget date_short []
    (label  :class "date_short"
            :text {time.day + "-" + time.month + "-" + time.year}))

(defwidget date_long []
    (label  :class "date_long"
            :text {time.day + "-" + time.monthname + "-" + time.yearlong}))


;; == == == Sundial == == ==
(defwidget sundial []
    (label :text {time.hour >= 5 && time.hour < 11 ? "Morning" : 
                time.hour >= 11 && time.hour < 13 ? "Prenoon" : 
                time.hour >= 13 && time.hour < 15 ? "Lunch" : 
                time.hour >= 15 && time.hour < 19 ? "Afternoon" :
                time.hour >= 19 && time.hour < 22 ? "Evening" : "Night"}))


;; == == == Weather == == ==
(defpoll weather_temp :interval "15m"
    "./scripts/weather.sh --temp")
(defpoll weather_feels :interval "15m"
    "./scripts/weather.sh --feels")
(defpoll weather_status :interval "15m"
    "./scripts/weather.sh --condition")
(defpoll weather_locale :interval "15m"
    "./scripts/weather.sh --locale")

(defwidget weather []
    (box :class "calendar-bar-bottom"
         :orientation "horizontal"
         :halign "center"
         :space-evenly false
         :spacing 20
         (box :class "calendar-bar-temp"
              (label :text "${round(weather_temp, 0)}(${round(weather_feels, 0)})°C"))
         (box :class "calendar-bar-weather"
              (label :text {weather_status}))))

(defwidget calendar_time []
    (box :class "calendar-bar-time"
         :orientation "vertical"
         :space-evenly false
         (label :class "calendar-bar-hour"
                :text {time.hour}
                :halign "start")
         (box :halign "end"
              :space-evenly false
              (label :class "calendar-bar-min"
                     :text {time.min})
              (label :class "calendar-time-sec"
                     :text ":${time.sec}"))))
(defwidget calendar_sundial []
    (box :class "calendar-bar-sundial"
         (sundial)))
(defwidget calendar_day []
    (box :class "calendar-bar-sundial"
         (label :text {time.weekday})))

(defwidget calendar_wid []
    (box :class "calendar-wid"
         :halign "center"
         :hexpand true
         :vexpand true
         :space-evenly false
         (box :class "calendar-bar-main"
              :orientation "vertical"
              :space-evenly false
              :spacing 10
              (box :class "calendar-bar-top"
                    :orientation "horizontal"
                    :space-evenly false
                    :spacing 10
                    (calendar :class "calendar-bar-calendar"
                              :show-week-numbers true)
                    (box :class "calendar-bar-top-right"
                         :orientation "vertical"
                         :space-evenly false
                         :spacing 10
                         :valign "center"
                         (calendar_time)
                         (calendar_day)
                         (calendar_sundial)))
                    (weather))))


;; == == == Main Widget == == ==
(defwidget top_middle [] 
    (box :class "top_middle"
         :halign "center"
         (eventbox :onclick "eww update cal_rev=${!cal_rev}"
                    :cursor "pointer"
                    (box :orientation "horizontal"
                         :halign "center"
                         :space-evenly false
                         :spacing 10
                         (time_short)   
                         separator
                         (sundial)))))



;;                  _____  _       _     _      _____           _                   
;;  _____________  |  __ \(_)     | |   | |    |  __ \         | |    _____________ 
;; |_____________| | |__) |_  __ _| |__ | |_   | |__) |_ _ _ __| |_  |_____________|
;;  _____________  |  _  /| |/ _` | '_ \| __|  |  ___/ _` | '__| __|  _____________ 
;; |_____________| | | \ \| | (_| | | | | |_   | |  | (_| | |  | |_  |_____________|
;;                 |_|  \_\_|\__, |_| |_|\__|  |_|   \__,_|_|   \__|                
;;                            __/ |                                                 
;;                           |___/                                                  

;; == == == System Info == == ==
(defvar sysinfo_reveal false)
(defvar vol_reveal false)
(defvar vol_mute false)
(defpoll vol_perc :interval "1s"
    "wpctl get-volume @DEFAULT_AUDIO_SINK@ | tr  -d 'Volume: ' | tr -d '[MUTED]'")

(defpoll cpu_top5_perc :interval "1s"
    "ps -eo %cpu --sort=-%cpu | head -6 | awk 'NR == 2, NR == 6 {print $0}'")
(defpoll cpu_top5_names :interval "1s"
    "ps -eo comm --sort=-%cpu | head -6 | awk 'NR == 2, NR == 6 {print $0}'")
(defpoll mem_top5_perc :interval "1s"
    "ps -eo %mem --sort=-%mem | head -6 | awk 'NR == 2, NR == 6 {print $0}'")
(defpoll mem_top5_names :interval "1s"
    "ps -eo comm --sort=-%mem | head -6 | awk 'NR == 2, NR == 6 {print $0}'")


(defwidget cpu []
    (circular-progress :class "cpu-circle"
                        :value {EWW_CPU.avg}
                        :thickness 2
                        :clockwise true
                        :start-at 25
                        :width 20
                        (label :text {round(EWW_CPU.avg, 0)})))

(defwidget mem []
    (circular-progress :class "mem-circle"
                        :value {EWW_RAM.used_mem/1000000000*100/32} ;;Needs improvement for dynamic total memory
                        :thickness 2
                        :clockwise true
                        :start-at 25
                        :width 20
                        (label :text {round(EWW_RAM.used_mem/1000000000, 0)})))


(defwidget volume []
    (eventbox :onhover "eww update vol_reveal=true"
              :onhoverlost "eww update vol_reveal=false"
              (box :class "volume-main"
                    :space-evenly false
                    :spacing 2
                    :orientation "horizontal"
                    (revealer :transition "slideleft"
                              :reveal vol_reveal
                              (scale :class "volume-bar"
                                     :value {vol_perc*100}
                                     :round-digits 0
                                     :tooltip "${vol_perc*100}%"
                                     :orientation "horizontal"
                                     :max 100
                                     :min 0
                                     :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%"))
                    (eventbox :onclick "eww update vol_mute=${!vol_mute} && wpctl set-mute @DEFAULT_AUDIO_SINK@ ${!vol_mute ? '1' : '0'}"
                              :cursor "pointer"
                              :class "volume-mute"
                              (label :text {vol_mute ? "🔇" : "🔊"})))))


(defwidget cpu_info []
    (box :class "info-cpu"
         :space-evenly false
         :spacing 10
         :orientation "vertical"
         (box :class "info-cpu-title"
              :halign "start"
              :width 275
              (label :text "CPU"
                     :halign "start"))
         (box :class "info-cpu-usage"
              :orientation "horizontal"
              (box :class "info-cpu-usage-freq"
                    :halign "start"
                    (label :text "${EWW_CPU.cores[0].freq}MHz"))
              (box :class "info-cpu-usage-percent"
                    :halign "end"
                    (label :text "${round(EWW_CPU.avg, 2)}%")))
         (box :class "info-cpu-graph"
              :halign "center"
              :space-evenly false
              :spacing 10
              (graph :class "info-cpu-graph-freq"
                     :value {EWW_CPU.cores[0].freq}
                     :dynamic true
                     :time-range "30s"
                     :thickness 2
                     :width 110)
            separator
              (graph :class "info-cpu-graph-usage"
                     :value {EWW_CPU.avg}
                     :dynamic true
                     :time-range "30s"
                     :thickness 2
                     :width 110))
         (box :class "info-cpu-process"
              :halign "center"
              :orientation "vertical"
              :space-evenly false
              :spacing 10
              (box :class "info-cpu-legend"
                    (label :text "Name"
                            :halign "start")
                    (label :text "CPU%"
                            :halign "end"))
              (box :class "info-cpu-processes"
                    :space-evenly true
                    (label :text {cpu_top5_names}
                            :halign "start")
                    (label :text {cpu_top5_perc}
                            :halign "end")
                    ))))

(defwidget mem_info []
    (box :class "info-mem"
         :orientation "vertical"
         :space-evenly false
         :spacing 10
         (box :class "info-mem-title"
              :halign "start"
              :width 275
              (label :text "Memory"
                     :halign "start"))
         (box :class "info-mem-usage"
              :orientation "horizontal"
              :space-evenly false
              :spacing 10
              (box :class "info-mem-usage-used"
                    :space-evenly false
                    :spacing 4
                    (label :text "Used: ${EWW_RAM.used_mem < 1000 ? EWW_RAM.used_mem :
                                          EWW_RAM.used_mem < 1000000 ? round(EWW_RAM.used_mem/1000, 2) : 
                                          EWW_RAM.used_mem < 1000000000 ? round(EWW_RAM.used_mem/1000000, 2) : round(EWW_RAM.used_mem/1000000000, 2)}")
                    (label :text {EWW_RAM.used_mem < 1000 ? "B" : 
                                  EWW_RAM.used_mem < 1000000 ? "KiB" : 
                                  EWW_RAM.used_mem < 1000000000 ? "MiB" : "GiB"}))
              separator
              (box :class "info-mem-usage-free"
                    :space-evenly false
                    :spacing 4
                    (label :text "Free: ${EWW_RAM.free_mem < 1000 ? EWW_RAM.free_mem : 
                                          EWW_RAM.free_mem < 1000000 ? round(EWW_RAM.free_mem/1000, 2) : 
                                          EWW_RAM.free_mem < 1000000000 ? round(EWW_RAM.free_mem/1000000, 2) : round(EWW_RAM.free_mem/1000000000, 2)}")
                    (label :text {EWW_RAM.free_mem < 1000 ? "B" : 
                                  EWW_RAM.free_mem < 1000000 ? "KiB" : 
                                  EWW_RAM.free_mem < 1000000000 ? "MiB" : "GiB"})))
         (box :class "info-mem-graph"
              :halign "center"
              :hexpand true
              :vexpand true
              :height 42
              (graph :value {EWW_RAM.used_mem}
                     :dynamic true
                     :time-range "60s"
                     :thickness 2
                     :width 250))
         (box :class "info-mem-process"
              :halign "center"
              :orientation "vertical"
              :space-evenly false
              :spacing 10
              (box :class "info-mem-legend"
                    (label :text "Name"
                            :halign "start")
                    (label :text "MEM%"
                            :halign "end"))
              (box :class "info-mem-processes"
                    :space-evenly true
                    (label :text {mem_top5_names}
                            :halign "start")
                    (label :text {mem_top5_perc}
                            :halign "end")))))

(defwidget net_info []
    (box :class "net-info"
         :orientation "vertical"
         :space-evenly false
         :spacing 10
         (box :class "net-info-title"
              :halign "start"
              :width 275
              (label :text "Network"
                     :halign "start"))
         (box :class "net-info-usage"
              :halign "center"
              :orientation "horizontal"
              :space-evenly false
              :spacing 10
              (box :class "net-info-up"
                    :space-evenly false
                    :spacing 1
                    (label :width 100
                           :text "Up: ${EWW_NET.enp5s0.NET_UP/2 < 1000 ? round(EWW_NET.enp5s0.NET_UP/2, 0) : 
                                        EWW_NET.enp5s0.NET_UP/2 < 1000000 ? round(EWW_NET.enp5s0.NET_UP/2000, 0) : 
                                        EWW_NET.enp5s0.NET_UP/2 < 1000000000 ? round(EWW_NET.enp5s0.NET_UP/2000000, 0) : round(EWW_NET.enp5s0.NET_UP/2000000000, 0)}")
                    (label :text {EWW_NET.enp5s0.NET_UP/2 < 1000 ? "B" : 
                                  EWW_NET.enp5s0.NET_UP/2 < 1000000 ? "KiB" : 
                                  EWW_NET.enp5s0.NET_UP/2 < 1000000000 ? "MiB" : "GiB"}))
              separator
              (box :class "net-info-down"
                    :space-evenly false
                    :spacing 1
                    (label :width 100
                           :text "Down: ${EWW_NET.enp5s0.NET_DOWN/2 < 1000 ? round(EWW_NET.enp5s0.NET_DOWN/2, 0) : 
                                          EWW_NET.enp5s0.NET_DOWN/2 < 1000000 ? round(EWW_NET.enp5s0.NET_DOWN/2000, 0) : 
                                          EWW_NET.enp5s0.NET_DOWN/2 < 1000000000 ? round(EWW_NET.enp5s0.NET_DOWN/2000000, 0) : round(EWW_NET.enp5s0.NET_DOWN/2000000000, 0)}")
                    (label :text {EWW_NET.enp5s0.NET_DOWN/2 < 1000 ? "B" : 
                                  EWW_NET.enp5s0.NET_DOWN/2 < 1000000 ? "KiB" : 
                                  EWW_NET.enp5s0.NET_DOWN/2 < 1000000000 ? "Mib" : "GiB"})))
         (box :class "net-info-graph"
              :halign "center"
              :hexpand true
              :space-evenly false
              :spacing 10
              :height 20
              (graph :class "net-info-graph-up"
                     :value {EWW_NET.enp5s0.NET_UP/2}
                     :dynamic true
                     :time-range "30s"
                     :thickness 2
                     :width 110)
            separator
              (graph :class "net-info-graph-down"
                     :value {EWW_NET.enp5s0.NET_DOWN/2}
                     :dynamic true
                     :time-range "30s"
                     :thickness 2
                     :width 110))))

(defwidget fullinfo []
    (box :class "full-info"
         :orientation "vertical"
         :space-evenly false
         :spacing 30
         (cpu_info)
         (mem_info)
         (net_info)))

(defwidget sysinfo []
    (box :space-evenly false
        (eventbox :class "sysinfo"
                  :cursor "pointer"
                  :onclick "eww update sysinfo_reveal=${!sysinfo_reveal} && eww update fullmusic=${fullmusic ? '${!fullmusic}' : '${fullmusic}'}"
                  :hexpand true
                  (box  :orientation "horizontal"
                        :halign "end"
                        :space-evenly false
                        :spacing 10
                        (cpu)
                        (mem)))))




;; == == == Music == == ==
(defvar fullmusic false)

(deflisten music_status :initial ""
    "playerctl --follow status --format '{{ uc(status) }}' || true")
(deflisten music_artist :initial ""
    "playerctl --follow metadata --format '{{ artist }}' || true")
(deflisten music_title :initial ""
    "playerctl --follow metadata --format '{{ title }}' || true")
(deflisten music_album :initial ""
    "playerctl --follow metadata --format '{{ album }}' || true")
(deflisten music_image :initial ""
    "playerctl --follow metadata --format '{{ mpris:artUrl}}'")
(deflisten music_progress :initial ""
    "playerctl --follow position --format '{{ duration(position) }}'")
(deflisten music_length :initial ""
    "playerctl --follow metadata --format '{{ duration(mpris:length) }}'")

(defwidget sound []
    (box :class "sound"
        (eventbox :class "music-short"
                  :cursor "pointer"
                  :onclick "eww update fullmusic=${!fullmusic} && eww update sysinfo_reveal=${sysinfo_reveal ? '${!sysinfo_reveal}' : '${sysinfo_reveal}'}"
                  (box  :orientation "horizontal"
                        :space-evenly false
                        :halign "start"
                        (label :text {music_status == "PLAYING" || music_status == "PAUSED" ? "${music_title} by ${music_artist}" : "..."}
                                :limit-width 25)))))

(defwidget music_long []
    (box :class "music-long"
         :orientation "vertical"
         :space-evenly false
         :spacing 10
         :hexpand true
         :vexpand true
         (box :orientation "horizontal"
              :space-evenly false
              :spacing 20
              (box :class "Music-Art"
                   (image :path {strlength(music_image) > 0 ? "${replace(music_image, 'file:/', '')}" : "./images/no-image-found.jpg"}
                          :image-width 200
                          :image-height 200))
              (box :orientation "Vertical"
                    :space-evenly false
                    :spacing 10
                    (box :class "music-long-title"
                         (label :text {music_status == "PLAYING" || music_status == "PAUSED" ? "${music_title}" : ""}
                                :limit-width 15))
                    (box :class "music-long-album"
                         {music_status == "PLAYING" || music_status == "PAUSED" ? "${music_album}" : ""})
                    (box :class "music-long-artist"
                         {music_status == "PLAYING" || music_status == "PAUSED" ? "${music_artist}" : ""})
                    (box :class "music-long-ontrols"
                         :halign "center"
                         (box :orientation "horizontal"
                              :space-evenly false
                              :spacing 10
                              (eventbox :class "music-long-next"
                                        :onclick "playerctl previous"
                                        :cursor "pointer"
                                        :width 30
                                        :height 30
                                        (label :text ""))
                              (eventbox :class "music-long-play"
                                        :onclick "playerctl play-pause"
                                        :cursor "pointer"
                                        :width 30
                                        {music_status == "PLAYING" ? "" : ""})
                              (eventbox :class "music-long-prev"
                                        :onclick "playerctl next"
                                        :cursor "pointer"
                                        :width 30
                                        (label :text ""))))))))


;; == == == Main Widget == == ==
(defwidget top_right []
    (box :class "top_right"
         :orientation "horizontal"
         :halign "end"
         :space-evenly false
         :spacing 10
         (sound)
         separator
         (volume)
         separator
         (sysinfo)))





;;                  _           __ _     _____           _                   
;;  _____________  | |         / _| |    |  __ \         | |    _____________ 
;; |_____________| | |     ___| |_| |_   | |__) |_ _ _ __| |_  |_____________|
;;  _____________  | |    / _ \  _| __|  |  ___/ _` | '__| __|  _____________ 
;; |_____________| | |___|  __/ | | |_   | |  | (_| | |  | |_  |_____________|
;;                 |______\___|_|  \__|  |_|   \__,_|_|   \__|                

;; == == == Hyprland Integration == == ==
(deflisten window :initial "..."
    "~/.config/eww/scripts/hyprland/get-window-title.sh")

(defwidget active []
    (box :class "active-window"
        (label :text {strlength(window) > 0 ? window : "..."}
                :limit-width 75)))


(deflisten workspaces :initial "[]"
    "bash ~/.config/eww/scripts/hyprland/get-workspaces")
(deflisten current_workspace :initial "1"
    "bash ~/.config/eww/scripts/hyprland/get-active-workspace")

(defwidget workspaces []
    (box
        (for workspace in workspaces
            (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
                      (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                            (label :text "${workspace.id}"))))))

;; == == == Main Menu == == ==
(defwidget menu []
    (eventbox :cursor "pointer"
              :onclick "./dashboard/launch_dash.sh"
              :class "menu"
              (label :text "menu")))


;; == == == Main Widget == == ==
(defwidget top_left []
    (box :class "top_left"
         :orientation "horizontal"
         :halign "start"
         :space-evenly false
         :spacing 10
         (menu)
         separator
         (active)
         separator
         (workspaces)))



;;                  ____                             
;;  _____________  |  _ \              _____________ 
;; |_____________| | |_) | __ _ _ __  |_____________|
;;  _____________  |  _ < / _` | '__|  _____________ 
;; |_____________| | |_) | (_| | |    |_____________|
;;                 |____/ \__,_|_|                  
;; Full Bar
(defwidget bar []
    (box :class "bar"
         :orientation "horizontal"
         :hexpand true
         :vexpand true
         :space-evenly true
         (top_left)
         (top_middle)
         (top_right)))


(defwindow top_bar
        :monitor 0
        :geometry (geometry :x "0%"
                            :y "5px"
                            :width "96%"
                            :height "2%"
                            :anchor "top center")
        :stacking "fg"
        :exclusive true
    (bar))


;;Right Parts
(defwidget info_bar [inforeveal]
    (box :class "info-bar"
         :orientation "horizontal"
         :halign "end"
         :hexpand true
         :vexpand true
         :space-evenly false
         :spacing 0
         (revealer :transition "slidedown"
                    :reveal inforeveal
                    :duration "750ms"
                    (fullinfo))))

(defwidget music_bar [musicreveal]
    (box :class "music-bar"
         :orientation "horizontal"
         :halign "end"
         :hexpand true
         :vexpand true
         :space-evenly false
         :spacing 0
         (revealer :transition "slidedown"
                    :reveal musicreveal
                    (music_long))))

(defwindow right_info
    :monitor 0
    :geometry (geometry :x "0%"
                        :y "1%"
                        :width "96%"
                        :height "0px"
                        :anchor "top center")
    :stacking "fg"
    :exclusive false
    (info_bar :inforeveal sysinfo_reveal))

(defwindow music_bar
    :monitor 0
    :geometry (geometry :x "10%"
                        :y "1%"
                        :width "96%"
                        :height "0px"
                        :anchor "top center")
    :stacking "fg"
    :exclusive false
    (music_bar :musicreveal fullmusic))

;; Middle Part
(defwidget calendar_bar [reveal]
    (box :class "calendar-bar"
         :orientation "horizontal"
         :halign "center"
         :hexpand true
         :vexpand true
         :space-evenly false
         :spacing 0
         (revealer :transition "slidedown"
                    :reveal reveal
                    (calendar_wid))))

(defwindow calendar
    :monitor 0
    :geometry (geometry :x "0%"
                        :y "1%"
                        :width "0%"
                        :height "0%"
                        :anchor "top center")
    :stacking "fg"
    :exclusive false
    (calendar_bar :reveal cal_rev))
