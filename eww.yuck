(include "./widgets.yuck")


; == == == Bar == == ==
(defwidget left []
    (box :class "left segment"
         :orientation "horizontal"
         :space-evenly false
         :spacing 20
         :halign "start"
         (menu)
         (window_w)
         (workspaces)
    )
)

(defwidget middle []
    (box :class "middle segment"
         :orientation "horizontal"
         :space-evenly false
         :spacing 20
         :halign "center"
         (time_short)
         (label :class "middle-weather"
                :tooltip "Is ${weather_temp}°C / Feels like ${weather_feels}°C / ${weather_status}"
                :text {weather_icon})
    )
)

(defwidget right []
(box :class "right segment"
    :orientation "horizontal"
         :space-evenly false
         :spacing 20
         :halign "end"
         (volume)
         (media_control :space -10)
         (music_short)
    )
)

(defwidget bar []
    (centerbox :class "bar"
         :orientation "horizontal"
         (left)
         (middle)
         (right)
    )
)


(defwindow bar
    :monitor 0
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "99%"
                        :height "2%"
                        :anchor "top center")
    :stacking "fg"
    :exclusive true
    (bar)
)

; == == == Background == == ==
(defwidget back_power [space]
     (box :class "back-power back-widget"
          :orientation "horizontal"
          :space-evenly false
          :spacing {space}
          :halign "end"
          :valign "end"
          (shutdown)
          (restart)
          (logout)
     )
)

(defwidget back_info [space]
     (box :class "back-info back-widget"
          :orientation "horizontal"
          :space-evenly false
          :spacing {space}
          :halign "start"
          :valign "end"
          (CPU_long)
          (MEM_long)
          (disk_long)
     )
)

(defwidget back_time [space]
     (box :class "back-time back-widget"
          :orientation "vertical"
          :space-evenly false
          :spacing {space}
          :halign "end"
          :valign "start"
          (box :orientation "horizontal"
               :space-evenly false
               :spacing {space}
               :halign "center"
               (sundial)
               "|"
               (label :text {weather_status})
          )
          (date_long)
     )
)

(defwidget back_music []
     (box :class "back-music back-widget"
          :orientation "vertical"
          :space-evenly false
          :spacing 10
          :valign "start"
          :halign "start"
          (image :path {strlength(music_image) > 0 ? "${replace(music_image, 'file://', '')}" : "./images/no-image-found.png"}
                 :image-width 100
                 :image-height 100
          )
          (label :text {music_title}
                 :limit-width 15)
          (label :text {music_artist})
          (media_control :space 10)
     )
)

(defwidget background []
     (box :class "background"
          :orientation "horizontal"
          (box :orientation "vertical"
               (back_music)
               (back_info :space 10)
          )
          (box :orientation "vertical"
               (back_time :space 10)
               (back_power :space 10)
          )
     )
)

(defwindow background
     :monitor 0
     :geometry (geometry :x "0%"
                         :y "0%"
                         :width "90%"
                         :height "90%"
                         :anchor "center center")
     :stacking "bg"
     :exclusive false
     (background)
)
