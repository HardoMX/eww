
;; == == == Account == == == 
(defpoll user :interval "24h"
    "whoami")

(defwidget profile []
    (box :class "profile"
         :orientation "vertical"
         :space-evenly false
         :spacing 20
         (image :path "./images/profile.png"
                :image-width 100
                :image-height 100
                :height 150)
         (label :class "username"
                :text {user}
                :height 50)))

;; == == == Sysinfo == == ==
(defwidget cpu []
    (box :class "cpu"
         :orientation "vertical"
         :space-evenly false
         :spacing 20
         (circular-progress :class "cpu-circle"
                            :value {EWW_CPU.avg}
                            :thickness 10
                            :clockwise true
                            :start-at 25
                            :width 100
                            :height 100
                            (label :text "${round(EWW_CPU.avg, 0)}%"))
         (label :class "cpu-title"
                :text "CPU")))

(defwidget mem []
    (box :class "mem"
         :orientation "vertical"
         :space-evenly false
         :spacing 20
         (circular-progress :class "mem-circle"
                            :value {EWW_RAM.used_mem/1000000000*100/32} ;;Needs improvement for dynamic memory amount
                            :thickness 10
                            :clockwise true
                            :start-at 25
                            :width 100
                            :height 100
                            (label :text "${round(EWW_RAM.used_mem/1000000000, 0)}GB"))
         (label :class "mem-title"
                :text "MEM")))

(defwidget disk []
    (box :class "disk"
         :orientation "vertical"
         :space-evenly false
         :spacing 20
         (circular-progress :class "disk-circle"
                            :value {EWW_DISK["/"].used_perc}
                            :thickness 10
                            :clockwise true
                            :start-at 25
                            :width 100
                            :height 100
                            (label :text "${round(EWW_DISK["/"].used_perc, 2)}%"))
         (label :class "disk-title"
                :text "DISK")))

;(defwidget bat []
;    (box :class "bat"
;         :orientation "vertical"
;         (circular-progress :class "bat-circle"
;                            :value {EWW_BATTERY.hidpp_battery_0.status}
;                            :thickness 10
;                            :clockwise true
;                            :start-at 25
;                            :width 100
;                            :height 100
;                            (label :text "${round(EWW_BATTERY.hidpp_battery_0.status, 0)}%"))))

(defwidget sys_1 []
    (box :orientation "vertical"
         :space-evenly false
         :spacing 5
         (cpu)
         (disk)))
(defwidget sys_2 []
    (box :orientation "vertical"
         :space-evenly false
         :spacing 5
         (mem)
         ;(bat)
         ))

(defwidget sysinfo[]
    (box :class "sysinfo"
        :orientation "horizontal"
        (sys_1)
        (sys_2)
        ))


;; == == == Time == == ==
(defpoll time :interval "1s"
    `date +'{"weekday":"%A", "day":"%d", "monthname":"%B", "month":"%m", "year":"%y", "hour":"%H", "min":"%M", "sec":"%S"}'`)
;(defwidget sundial []
;    (label :text {formattime(EWW_TIME, "%H") >= 5 && formattime(EWW_TIME, "%H") < 11 ? "Morning" : 
;                  formattime(EWW_TIME, "%H") >= 11 && formattime(EWW_TIME, "%H") < 13 ? "Prenoon" : 
;                  formattime(EWW_TIME, "%H") >= 13 && formattime(EWW_TIME, "%H") < 15 ? "Lunch" : 
;                  formattime(EWW_TIME, "%H") >= 15 && formattime(EWW_TIME, "%H") < 19 ? "Afternoon" : 
;                  formattime(EWW_TIME, "%H") >= 19 && formattime(EWW_TIME, "%H") < 22 ? "Evening" : "Night"}))
(defwidget sundial []
    (label :text {time.hour >= 5 && time.hour < 11 ? "Morning" : 
                  time.hour >= 11 && time.hour < 13 ? "Prenoon" : 
                  time.hour >= 13 && time.hour < 15 ? "Noon" :
                  time.hour >= 15 && time.hour < 19 ? "Afternoon" : 
                  time.hour >= 19 && time.hour < 22 ? "Evening" : "Night"}))

(defwidget time []
    (box :class "time"
         :orientation "horizontal"
         :space-evenly false
         (box :class "time-time"
              :orientation "horizontal"
              ;(label :class "time-hour"
              ;       :text {formattime(EWW_TIME, "%H")})
              ;(label :class "time-min"
              ;       :text {formattime(EWW_TIME, "%M")})
              (label :class "time-hour"
                     :text {time.hour})
              (label :class "time-min"
                     :text {time.min}))
         (box :class "time-date"
              :orientation "vertical"
              ;(label :text {formattime(EWW_TIME, "%A")})
              (label :text {time.weekday})
              (sundial))))


(defpoll UPHOUR :interval "5s"
    "uptime -p | awk '{print $2}'")
(defpoll UPMINUTE :interval "5s"
    "uptime -p | awk '{print $4}'")

(defwidget uptime []
    (box :class "uptime"
         :orientation "horizontal"
         (box :class "uptime-icon"
              (image :path "./images/icons/uptime.png"
                     :image-width 75
                     :image-height 75))
         (box :class "uptime_time"
              :orientation "vertical"
              (label :class "uptime-hour"
                     :text "${UPHOUR} hours")
              (label :class "uptime-minute"
                     :text "${UPMINUTE} minutes"))))

(defwidget timings []
    (box :class "timings"
         :orientation "vertical"
         (time)
         (uptime)))


;; == == == Weather == == ==
(defpoll temp :interval "15m"
    "./scripts/weather.sh --temp")
(defpoll icon :interval "15m"
    "./scripts/weather.sh --icon")
(defpoll condition :interval "15m"
    "./scripts/weather.sh --condition")

(defwidget weather []
    (box :class "weather-widget"
         :orientation "vertical"
         :space-evenly false
         :spacing 10
         (box :class "weather-weather"
              :orientation "horizontal"
              (image :class "weather-icon"
                     :path {icon}
                     :image-width 100
                     :image-height 100)
              (label :class "weather-temp"
                     :text {temp}))
         (box :class "weather-condition"
              :orientation "vertical"
              (label :class "weather-cond-text"
                     :text {condition}))))


;; == == == Syscontrol == == ==
(defvar mute false)

(defwidget brightness []
    (box :class "brightness"
         :orientation "horizontal"
         :space-evenly false
         :spacing 30
         (image :class "brt-icon"
                :path "./images/icons/brightness.png"
                :image-width 50
                :image-height 50)
         (scale :class "brt-scale"
                :value 50
                :min 0
                :max 99)))
(defwidget volume []
    (box :class "volume"
         :orientation "horizontal"
         :space-evenly false
         :spacing 30
         (eventbox :class "vol-mute"
                    :onclick "eww update mute=${!mute} && wpctl set-mute @DEFAULT_AUDIO_SINK@ ${!mute ? '1' : '0'}" ;; No worky
                    :cursor "pointer"
             (image :class "vol-icon"
                    :path {!mute == true ? "./images/icons/volume.png" : "./images/icons/mute.png"}
                    :image-width 50
                    :image-height 50))
         (scale :class "vol-scale"
                :value 69
                :min 0
                :max 99)))

(defwidget syscontrols []
    (box :class "syscontrols"
         :orientation "vertical"
         :space-evenly false
         :spacing 30
         (brightness)
         (volume)))


;; == == == Music == == ==
(deflisten music_status :initial ""
    "playerctl --follow status --format '{{ uc(status) }}' || true")
(deflisten music_artist :initial ""
    "playerctl --follow metadata --format '{{ artist }}' || true")
(deflisten music_title :initial ""
    "playerctl --follow metadata --format '{{ title }}' || true")
(deflisten music_album :initial ""
    "playerctl --follow metadata --format '{{ album }}' || true")
(deflisten music_art :initial ""
    "playerctl --follow metadata --format '{{ mpris:artUrl }}'")
(defvar no_music "./images/no-image-found.jpg")

(defwidget music_info []
    (box :class "music-info"
         :orientation "vertical"
         :space-evenly false
         :spacing 7
         (label :class "music-title"
                :limit-width 10
                :text {music_status == "PLAYING" || music_status == "PAUSED" ? music_title : "..."})
         (label :class "music-album"
                :limit-width 20
                :text {music_status == "PLAYING" || music_status == "PAUSED" ? music_album : "..."})
         (label :class "music-artist"
                :limit-width 15
                :text {music_status == "PLAYING" || music_status == "PAUSED" ? music_artist : "..."})))

(defwidget music_controls []
    (box :class "music-controls"
         :orientation "horizontal"
         :space-evenly false
         :spacing 20
         :halign "center"
         (eventbox :class "music-prev"
                    :onclick "playerctl previous"
                    :cursor "pointer"
                    :width 30
                    :height 30
                    (image :path "./images/icons/left-arrow.png"
                            :image-width 30
                            :image-height 30))
         (eventbox :class "music-play"
                    :onclick "playerctl play-pause"
                    :cursor "pointer"
                    :width 30
                    :height 30
                    (image :path {music_status == "PLAYING" ? "./images/icons/pause.png" : "./images/icons/play-button-arrowhead.png"}
                            :image-width 30
                            :image-height 30))
         (eventbox :class "music-next"
                    :onclick "playerctl next"
                    :cursor "pointer"
                    :width 30
                    :height 30
                    (image :path "./images/icons/right-arrow.png"
                            :image-width 30
                            :image-height 30))))


(defwidget music []
    (box :class "music"
         :orientation "horizontal"
         :space-evenly false
         (box :class "music-art"
              :width 10
              :style "background-image: url('${strlength(music_art) > 0 ? replace(music_art, 'file:/', '') : no_music}');")
         (box :class "music-right"
              :orientation "vertical"
              :space-evenly false
              :spacing 7
              (music_info)
              (music_controls))))


;; == == == Apps == == ==
(defwidget apps []
    (box :class "apps"
         :orientation "vertical"
         :spacing 10
         (box :class "apps-row-1"
              :spacing 10
              (label :text "app 1")
              (label :text "app 2")
              (label :text "app 3")
              (label :text "app 4"))
         (box :class "apps-row-2"
              :spacing 10
              (label :text "app 5")
              (label :text "app 6")
              (label :text "app 7")
              (label :text "app 8"))
         (box :class "apps-row-3"
              :spacing 10
              (label :text "app 9")
              (label :text "app 10")
              (label :text "app 11")
              (label :text "app 12"))))


;; == == == Sites == == ==
(defwidget mail []
    (eventbox :cursor "pointer" 
              :onclick "./scripts/links.sh --mail"
              (box :class "mail"
                    :orientation "vertical"
                    :space-evenly false
                    :spacing 10
                    :width 175

             (image :path "./images/icons/gmail.png"
                    :image-width 85
                    :image-height 85)
             (label :class "mails"
                    :text "mails"
                    :height 30))))
(defwidget git []
    (eventbox :cursor "pointer"
              :onclick "./scripts/links.sh --gh"
              (box :class "git"
                   :width 175
                   (image :path "./images/icons/github.png"
                          :image-width 100
                          :image-height 100))))
(defwidget reddit []
    (eventbox :cursor "pointer"
              :onclick "./sccripts/links.sh --rd"
              (box :class "reddit"
              :width 175
              (image :path "./images/icons/reddit.png"
                     :image-width 100
                     :image-height 100))))
(defwidget yt []
    (eventbox :cursor "pointer"
              :onclick "./scripts/links.sh --yt"
              (box :class "yt"
                    :width 175
                    (image :path "./images/icons/youtube(1).png"
                            :image-width 100
                            :image-height 100))))


;; == == == Power Control == == ==
(defwidget logout []
    (box :width 75
         :height 75
         (eventbox :class "logout"
                   :cursor "pointer"
                   (image :path "./images/icons/logout.png"
                          :image-width 50
                          :image-height 50))))
(defwidget sleep []
    (box :width 75
         :height 75
         (eventbox :class "sleep"
                   :cursor "pointer"
                   (image :path "./images/icons/sleep.png"
                          :image-width 50
                          :image-height 50))))
(defwidget restart []
    (box :width 75
         :height 75
         (eventbox :class "restart"
                   :cursor "pointer"
                   (image :path "./images/icons/rotate.png"
                          :image-width 50
                          :image-height 50))))
(defwidget shutdown []
    (box :width 75
         :height 75
         (eventbox :class "shutdown"
                   :cursor "pointer"
                   (image :path "./images/icons/power-off.png"
                          :image-width 50
                          :image-height 50))))

(defwidget power_control []
    (box :class "pwr-ctrl"
         :orientation "vertical"
         :space-evenly false
         :spacing 5
         (box :class "pwr-row-1"
              :orientation "horizontal"
              :spacing 5
              (logout)
              (sleep))
         (box :class "pwr-row-2"
              :orientation "horizontal"
              :spacing 5
              (restart)
              (shutdown))))


;; == == == Row Widgets == == ==
(defwidget left []
    (box :class "left"
         :orientation "vertical"
         :space-evenly false
         (profile)
         (sysinfo)))

(defwidget row_1 []
    (box :class "row-1"
         :orientation "horizontal"
         :space-evenly false
         (timings)
         (weather)
         (syscontrols)))

(defwidget row_2 []
    (box :class "row-1"
         :orientation "horizontal"
         (music)
         (apps)))

(defwidget row_3 []
    (box :class "row-1"
         :orientation "horizontal"
         :space-evenly false
         (mail)
         (git)
         (reddit)
         (yt)
         (power_control)))

(defwidget rows []
    (box :orientation "vertical"
         :space-evenly false
         (row_1)
         (row_2)
         (row_3)))


;; == == == Main == == ==
(defwidget dashboard []
    (box :class "dashboard-rows"
         :orientation "horizontal"
         :space-evenly false
         :halign "center"
         :valign "center"
         (left)
         (rows)))

(defwindow dashboard
        :monitor 1
        :geometry (geometry :x "0%"
                            :y "0%"
                            :width "100%"
                            :height "100%")
        :stacking "fg"
        :exclusive true
        (dashboard))
